// Code generated by gen; DO NOT EDIT.

package model

import (
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// ================================= Model =================================
func (d *Model) BeforeCreate(tx *gorm.DB) error {
	if d.ID == nil {
		d.ID = PtrOf(uuid.New())
	}
	return nil
}

func (d *Model) Bind(ctx *gin.Context) error {
	var r Model
	if err := ctx.ShouldBindJSON(&r); err != nil {
		return err
	}

	return nil
}

func (d *Model) BindWithReadonly(ctx *gin.Context, old Model) error {
	if err := d.Bind(ctx); err != nil {
		return err
	}
	if d.ID == nil {
		d.ID = old.ID
	}

	return nil
}

// ================================= Service =================================
func (d *Service) BeforeCreate(tx *gorm.DB) error {
	if d.ID == nil {
		d.ID = PtrOf(uuid.New())
	}
	return nil
}

func (d *Service) Bind(ctx *gin.Context) error {
	var r Service
	if err := ctx.ShouldBindJSON(&r); err != nil {
		return err
	}
	d.Name = r.Name
	d.Type = r.Type
	d.URL = r.URL
	d.InputPrice = r.InputPrice
	d.OutputPrice = r.OutputPrice

	return nil
}

func (d *Service) BindWithReadonly(ctx *gin.Context, old Service) error {
	if err := d.Bind(ctx); err != nil {
		return err
	}
	if d.ID == nil {
		d.ID = old.ID
	}

	return nil
}

// ================================= User =================================
func (d *User) BeforeCreate(tx *gorm.DB) error {
	if d.ID == nil {
		d.ID = PtrOf(uuid.New())
	}
	return nil
}

func (d *User) Bind(ctx *gin.Context) error {
	var r User
	if err := ctx.ShouldBindJSON(&r); err != nil {
		return err
	}
	d.User = r.User
	d.LastRequestNonce = r.LastRequestNonce
	d.LockBalance = r.LockBalance
	d.LastBalanceCheckTime = r.LastBalanceCheckTime
	d.LastResponseTokenCount = r.LastResponseTokenCount
	d.UnsettledFee = r.UnsettledFee

	return nil
}

func (d *User) BindWithReadonly(ctx *gin.Context, old User) error {
	if err := d.Bind(ctx); err != nil {
		return err
	}
	if d.ID == nil {
		d.ID = old.ID
	}

	return nil
}
