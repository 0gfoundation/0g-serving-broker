package main

import "text/template"

var (
	scanValueComment = "\n//=============== implementation of sql.scanner and sql.valuer  ==============="
	scanValueTplText = `
func (m %[1]s) Value() (driver.Value, error) {
	return json.Marshal(m)
}
func (m *%[1]s) Scan(value interface{}) error {
	if v, ok := value.([]byte); ok {
		return json.Unmarshal(v, m)
	}
	return fmt.Errorf("can't convert %%T to %[1]s", value)
}	
`

	modelTplHeader = `// Code generated by %s; DO NOT EDIT.

package model

import (
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"gorm.io/gorm"
)
`
	modelTplHeaderWithScanValue = `// Code generated by %s; DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"gorm.io/gorm"
)
`

	modelTplText = `
// ================================= {{ .TypeName }} =================================
func (d *{{ .TypeName }}) BeforeCreate(tx *gorm.DB) error {
	if d.ID == nil {
		d.ID = PtrOf(uuid.New())
	}
	return nil
}

func (d *{{ .TypeName }}) Bind(ctx *gin.Context) error {
	var r {{ .TypeName }}
	if err := ctx.ShouldBindJSON(&r); err != nil {
		return err
	}
	
	{{- range $index, $element := .WritableFields }}
	d.{{ $element }} = r.{{ $element }}
	{{- end }}

	return nil
}

func (d *{{ .TypeName }}) BindWithReadonly(ctx *gin.Context, old {{ .TypeName }}) error {
	if err := d.Bind(ctx); err != nil {
		return err
	}

	{{- range $index, $element := .ReadonlyFields }}
	if d.{{ $element.Name }} == nil {
		d.{{ $element.Name }} = old.{{ $element.Name }}
	}
	{{- end }}

	return nil
}
`
	modelTpl = template.Must(template.New("bindOpt").Parse(modelTplText))

	validateUpdateTplHeader = `// Code generated by %s; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	apiequality "k8s.io/apimachinery/pkg/api/equality"
)
`

	validateUpdateTplText = `
func ValidateUpdate{{ .TypeName }}(oldVal, newVal {{ .TypeName }}) error {
	fields := []string{}
	{{- range $index, $element := .ReadonlyFields }}
	if newVal.{{ $element.Name }} != nil && !apiequality.Semantic.DeepEqual(newVal.{{ $element.Name }}, oldVal.{{ $element.Name }}){
		fields = append(fields, "{{ $element.JSON }}")
	}
	{{- end }}
	{{range $index, $element := .ImmutableFields }}
	if !apiequality.Semantic.DeepEqual(newVal.{{ $element.Name }}, oldVal.{{ $element.Name }}){
		fields = append(fields, "{{ $element.JSON }}")
	}
	{{- end }}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}
`
	validateUpdateTpl = template.Must(template.New("validateOpt").Parse(validateUpdateTplText))
)
