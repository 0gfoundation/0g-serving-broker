// Code generated by gen; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	apiequality "k8s.io/apimachinery/pkg/api/equality"
)

func ValidateUpdateProvider(oldVal, newVal Provider) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.Provider, oldVal.Provider){
		fields = append(fields, "provider")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateRefund(oldVal, newVal Refund) error {
	fields := []string{}
	if newVal.Index != nil && !apiequality.Semantic.DeepEqual(newVal.Index, oldVal.Index){
		fields = append(fields, "index")
	}
	
	if !apiequality.Semantic.DeepEqual(newVal.Provider, oldVal.Provider){
		fields = append(fields, "provider")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateRequest(oldVal, newVal Request) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.ProviderAddress, oldVal.ProviderAddress){
		fields = append(fields, "providerAddress")
	}
	if !apiequality.Semantic.DeepEqual(newVal.Nonce, oldVal.Nonce){
		fields = append(fields, "nonce")
	}
	if !apiequality.Semantic.DeepEqual(newVal.ServiceName, oldVal.ServiceName){
		fields = append(fields, "serviceName")
	}
	if !apiequality.Semantic.DeepEqual(newVal.InputFee, oldVal.InputFee){
		fields = append(fields, "inputFee")
	}
	if !apiequality.Semantic.DeepEqual(newVal.PreviousOutputFee, oldVal.PreviousOutputFee){
		fields = append(fields, "previousOutputFee")
	}
	if !apiequality.Semantic.DeepEqual(newVal.Fee, oldVal.Fee){
		fields = append(fields, "fee")
	}
	if !apiequality.Semantic.DeepEqual(newVal.Signature, oldVal.Signature){
		fields = append(fields, "signature")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateSystemInfo(oldVal, newVal SystemInfo) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.K, oldVal.K){
		fields = append(fields, "k")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}
