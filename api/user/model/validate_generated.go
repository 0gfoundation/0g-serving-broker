// Code generated by gen; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	apiequality "k8s.io/apimachinery/pkg/api/equality"
)

func ValidateUpdateProvider(oldVal, newVal Provider) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.Provider, oldVal.Provider){
		fields = append(fields, "provider")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateRefund(oldVal, newVal Refund) error {
	fields := []string{}
	if newVal.Index != nil && !apiequality.Semantic.DeepEqual(newVal.Index, oldVal.Index){
		fields = append(fields, "index")
	}
	
	if !apiequality.Semantic.DeepEqual(newVal.Provider, oldVal.Provider){
		fields = append(fields, "provider")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateSystemInfo(oldVal, newVal SystemInfo) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.K, oldVal.K){
		fields = append(fields, "k")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}
