// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: tapp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TappService_StartApp_FullMethodName  = "/tapp_service.TappService/StartApp"
	TappService_GetQuote_FullMethodName  = "/tapp_service.TappService/GetQuote"
	TappService_GetPubkey_FullMethodName = "/tapp_service.TappService/GetPubkey"
)

// TappServiceClient is the client API for TappService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type TappServiceClient interface {
	// Start an application using Docker Compose content
	StartApp(ctx context.Context, in *StartAppRequest, opts ...grpc.CallOption) (*StartAppResponse, error)
	// Generate and return TDX quote
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	// Get public key derived from TDX report
	GetPubkey(ctx context.Context, in *GetPubkeyRequest, opts ...grpc.CallOption) (*GetPubkeyResponse, error)
}

type tappServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTappServiceClient(cc grpc.ClientConnInterface) TappServiceClient {
	return &tappServiceClient{cc}
}

func (c *tappServiceClient) StartApp(ctx context.Context, in *StartAppRequest, opts ...grpc.CallOption) (*StartAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartAppResponse)
	err := c.cc.Invoke(ctx, TappService_StartApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tappServiceClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, TappService_GetQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tappServiceClient) GetPubkey(ctx context.Context, in *GetPubkeyRequest, opts ...grpc.CallOption) (*GetPubkeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPubkeyResponse)
	err := c.cc.Invoke(ctx, TappService_GetPubkey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TappServiceServer is the server API for TappService service.
// All implementations must embed UnimplementedTappServiceServer
// for forward compatibility.
//
// Service definition
type TappServiceServer interface {
	// Start an application using Docker Compose content
	StartApp(context.Context, *StartAppRequest) (*StartAppResponse, error)
	// Generate and return TDX quote
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	// Get public key derived from TDX report
	GetPubkey(context.Context, *GetPubkeyRequest) (*GetPubkeyResponse, error)
	mustEmbedUnimplementedTappServiceServer()
}

// UnimplementedTappServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTappServiceServer struct{}

func (UnimplementedTappServiceServer) StartApp(context.Context, *StartAppRequest) (*StartAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartApp not implemented")
}
func (UnimplementedTappServiceServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedTappServiceServer) GetPubkey(context.Context, *GetPubkeyRequest) (*GetPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubkey not implemented")
}
func (UnimplementedTappServiceServer) mustEmbedUnimplementedTappServiceServer() {}
func (UnimplementedTappServiceServer) testEmbeddedByValue()                     {}

// UnsafeTappServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TappServiceServer will
// result in compilation errors.
type UnsafeTappServiceServer interface {
	mustEmbedUnimplementedTappServiceServer()
}

func RegisterTappServiceServer(s grpc.ServiceRegistrar, srv TappServiceServer) {
	// If the following call pancis, it indicates UnimplementedTappServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TappService_ServiceDesc, srv)
}

func _TappService_StartApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TappServiceServer).StartApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TappService_StartApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TappServiceServer).StartApp(ctx, req.(*StartAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TappService_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TappServiceServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TappService_GetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TappServiceServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TappService_GetPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TappServiceServer).GetPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TappService_GetPubkey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TappServiceServer).GetPubkey(ctx, req.(*GetPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TappService_ServiceDesc is the grpc.ServiceDesc for TappService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TappService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapp_service.TappService",
	HandlerType: (*TappServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartApp",
			Handler:    _TappService_StartApp_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _TappService_GetQuote_Handler,
		},
		{
			MethodName: "GetPubkey",
			Handler:    _TappService_GetPubkey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tapp.proto",
}
