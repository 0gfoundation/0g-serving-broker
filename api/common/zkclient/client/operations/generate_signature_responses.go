// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/0glabs/0g-serving-broker/common/zkclient/models"
)

// GenerateSignatureReader is a Reader for the GenerateSignature structure.
type GenerateSignatureReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GenerateSignatureReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGenerateSignatureOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGenerateSignatureDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGenerateSignatureOK creates a GenerateSignatureOK with default headers values
func NewGenerateSignatureOK() *GenerateSignatureOK {
	return &GenerateSignatureOK{}
}

/*
GenerateSignatureOK describes a response with status code 200, with default header values.

OK
*/
type GenerateSignatureOK struct {
	Payload *GenerateSignatureOKBody
}

// IsSuccess returns true when this generate signature o k response has a 2xx status code
func (o *GenerateSignatureOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this generate signature o k response has a 3xx status code
func (o *GenerateSignatureOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate signature o k response has a 4xx status code
func (o *GenerateSignatureOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate signature o k response has a 5xx status code
func (o *GenerateSignatureOK) IsServerError() bool {
	return false
}

// IsCode returns true when this generate signature o k response a status code equal to that given
func (o *GenerateSignatureOK) IsCode(code int) bool {
	return code == 200
}

func (o *GenerateSignatureOK) Error() string {
	return fmt.Sprintf("[POST /signature][%d] generateSignatureOK  %+v", 200, o.Payload)
}

func (o *GenerateSignatureOK) String() string {
	return fmt.Sprintf("[POST /signature][%d] generateSignatureOK  %+v", 200, o.Payload)
}

func (o *GenerateSignatureOK) GetPayload() *GenerateSignatureOKBody {
	return o.Payload
}

func (o *GenerateSignatureOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GenerateSignatureOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateSignatureDefault creates a GenerateSignatureDefault with default headers values
func NewGenerateSignatureDefault(code int) *GenerateSignatureDefault {
	return &GenerateSignatureDefault{
		_statusCode: code,
	}
}

/*
GenerateSignatureDefault describes a response with status code -1, with default header values.

Error
*/
type GenerateSignatureDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the generate signature default response
func (o *GenerateSignatureDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this generate signature default response has a 2xx status code
func (o *GenerateSignatureDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this generate signature default response has a 3xx status code
func (o *GenerateSignatureDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this generate signature default response has a 4xx status code
func (o *GenerateSignatureDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this generate signature default response has a 5xx status code
func (o *GenerateSignatureDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this generate signature default response a status code equal to that given
func (o *GenerateSignatureDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GenerateSignatureDefault) Error() string {
	return fmt.Sprintf("[POST /signature][%d] generateSignature default  %+v", o._statusCode, o.Payload)
}

func (o *GenerateSignatureDefault) String() string {
	return fmt.Sprintf("[POST /signature][%d] generateSignature default  %+v", o._statusCode, o.Payload)
}

func (o *GenerateSignatureDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GenerateSignatureDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GenerateSignatureBody generate signature body
swagger:model GenerateSignatureBody
*/
type GenerateSignatureBody struct {

	// privkey
	Privkey models.PrivateKey `json:"privkey"`

	// requests
	Requests []*models.Request `json:"requests"`
}

// Validate validates this generate signature body
func (o *GenerateSignatureBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrivkey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenerateSignatureBody) validatePrivkey(formats strfmt.Registry) error {
	if swag.IsZero(o.Privkey) { // not required
		return nil
	}

	if err := o.Privkey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "privkey")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "privkey")
		}
		return err
	}

	return nil
}

func (o *GenerateSignatureBody) validateRequests(formats strfmt.Registry) error {
	if swag.IsZero(o.Requests) { // not required
		return nil
	}

	for i := 0; i < len(o.Requests); i++ {
		if swag.IsZero(o.Requests[i]) { // not required
			continue
		}

		if o.Requests[i] != nil {
			if err := o.Requests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this generate signature body based on the context it is used
func (o *GenerateSignatureBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePrivkey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenerateSignatureBody) contextValidatePrivkey(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Privkey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "privkey")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "privkey")
		}
		return err
	}

	return nil
}

func (o *GenerateSignatureBody) contextValidateRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Requests); i++ {

		if o.Requests[i] != nil {
			if err := o.Requests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GenerateSignatureBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GenerateSignatureBody) UnmarshalBinary(b []byte) error {
	var res GenerateSignatureBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GenerateSignatureOKBody generate signature o k body
swagger:model GenerateSignatureOKBody
*/
type GenerateSignatureOKBody struct {

	// signatures
	Signatures [][]int64 `json:"signatures"`
}

// Validate validates this generate signature o k body
func (o *GenerateSignatureOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this generate signature o k body based on context it is used
func (o *GenerateSignatureOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GenerateSignatureOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GenerateSignatureOKBody) UnmarshalBinary(b []byte) error {
	var res GenerateSignatureOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
