// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckSignature(params *CheckSignatureParams, opts ...ClientOption) (*CheckSignatureOK, error)

	GenerateKeyPair(params *GenerateKeyPairParams, opts ...ClientOption) (*GenerateKeyPairOK, error)

	GenerateProofInput(params *GenerateProofInputParams, opts ...ClientOption) (*GenerateProofInputOK, error)

	GenerateSolidityCalldata(params *GenerateSolidityCalldataParams, opts ...ClientOption) (*GenerateSolidityCalldataOK, error)

	GenerateSolidityCalldataCombined(params *GenerateSolidityCalldataCombinedParams, opts ...ClientOption) (*GenerateSolidityCalldataCombinedOK, error)

	Signature(params *SignatureParams, opts ...ClientOption) (*SignatureOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CheckSignature check signature API
*/
func (a *Client) CheckSignature(params *CheckSignatureParams, opts ...ClientOption) (*CheckSignatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckSignatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkSignature",
		Method:             "POST",
		PathPattern:        "/check-sign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckSignatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckSignatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckSignatureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateKeyPair generate key pair API
*/
func (a *Client) GenerateKeyPair(params *GenerateKeyPairParams, opts ...ClientOption) (*GenerateKeyPairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateKeyPairParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateKeyPair",
		Method:             "GET",
		PathPattern:        "/sign-keypair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateKeyPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateKeyPairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateKeyPairDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateProofInput generate proof input API
*/
func (a *Client) GenerateProofInput(params *GenerateProofInputParams, opts ...ClientOption) (*GenerateProofInputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateProofInputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateProofInput",
		Method:             "POST",
		PathPattern:        "/proof-input",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateProofInputReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateProofInputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateProofInputDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateSolidityCalldata generate solidity calldata API
*/
func (a *Client) GenerateSolidityCalldata(params *GenerateSolidityCalldataParams, opts ...ClientOption) (*GenerateSolidityCalldataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateSolidityCalldataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateSolidityCalldata",
		Method:             "POST",
		PathPattern:        "/solidity-calldata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateSolidityCalldataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateSolidityCalldataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateSolidityCalldataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateSolidityCalldataCombined generate solidity calldata combined API
*/
func (a *Client) GenerateSolidityCalldataCombined(params *GenerateSolidityCalldataCombinedParams, opts ...ClientOption) (*GenerateSolidityCalldataCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateSolidityCalldataCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateSolidityCalldataCombined",
		Method:             "POST",
		PathPattern:        "/solidity-calldata-combined",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateSolidityCalldataCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateSolidityCalldataCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateSolidityCalldataCombinedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Signature signature API
*/
func (a *Client) Signature(params *SignatureParams, opts ...ClientOption) (*SignatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signature",
		Method:             "POST",
		PathPattern:        "/signature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SignatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SignatureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
