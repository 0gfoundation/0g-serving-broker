services:
  hardhat-node-with-contract:
    image: raven20241/hardhat-compute-network-contract:dev
    ports:
      - "8545:8545"
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      retries: 5
    networks:
      - localhost
  mysql:
    image: mysql:8.0
    ports:
      - "33060:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 10s
      retries: 5
    networks:
      - localhost

  # Nginx only depends on ZK services, not on broker (to avoid circular dependency)
  # It can start and proxy to broker when broker becomes available
  nginx:
    image: nginx:1.27.0
    ports:
      - "3080:80"
      - "30443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/stub_status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      zk-service-1:
        condition: service_healthy
      zk-service-2:
        condition: service_healthy
      zk-service-3:
        condition: service_healthy

  # Main broker starts after nginx is ready
  0g-serving-provider-broker:
    image: ghcr.io/0glabs/0g-serving-broker:dev-amd64
    environment:
      - PORT=3080
      - CONFIG_FILE=/etc/config.yaml
      - NETWORK=hardhat
    volumes:
      - ./config.local.yml:/etc/config.yaml
    command: 0g-inference-server
    networks:
      - localhost
    healthcheck:
      test: ["CMD-SHELL", "test -L /proc/1/exe && readlink /proc/1/exe | grep -q broker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      mysql:
        condition: service_healthy
      hardhat-node-with-contract:
        condition: service_healthy
      nginx:
        condition: service_healthy

  # Event service starts after broker is ready
  0g-serving-provider-event:
    image: ghcr.io/0glabs/0g-serving-broker:dev-amd64
    environment:
      - CONFIG_FILE=/etc/config.yaml
      - NETWORK=hardhat
    volumes:
      - ./config.local.yml:/etc/config.yaml
    command: 0g-inference-event
    networks:
      - localhost
    healthcheck:
      test: ["CMD", "pgrep", "-f", "0g-inference-event"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      0g-serving-provider-broker:
        condition: service_healthy
      nginx:
        condition: service_healthy

  # ZK service instances - all identical, load balanced by nginx
  zk-service-1:
    image: ghcr.io/0glabs/zk:0.2.1
    environment:
      JS_PROVER_PORT: 3001
    volumes:
      - type: tmpfs
        target: /app/logs
    healthcheck:
      test:
        ["CMD", "curl", "-f", "-X", "GET", "http://localhost:3001/sign-keypair"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - localhost
  zk-service-2:
    image: ghcr.io/0glabs/zk:0.2.1
    environment:
      JS_PROVER_PORT: 3002
    volumes:
      - type: tmpfs
        target: /app/logs
    healthcheck:
      test:
        ["CMD", "curl", "-f", "-X", "GET", "http://localhost:3002/sign-keypair"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - localhost
  zk-service-3:
    image: ghcr.io/0glabs/zk:0.2.1
    environment:
      JS_PROVER_PORT: 3003
    volumes:
      - type: tmpfs
        target: /app/logs
    healthcheck:
      test:
        ["CMD", "curl", "-f", "-X", "GET", "http://localhost:3003/sign-keypair"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - localhost
  prometheus:
    image: prom/prometheus:v2.45.2
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - localhost
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana-oss:11.4.0
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - localhost
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || wget -q --spider http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      prometheus:
        condition: service_healthy

  prometheus-node-exporter:
    image: prom/node-exporter:v1.7.0
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - localhost
    privileged: true
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9100/metrics || curl -f http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      prometheus:
        condition: service_healthy
    expose:
      - 9100
volumes:
  mysql-data:

networks:
  localhost:
    name: localhost
    external: false
