// Code generated by gen; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	apiequality "k8s.io/apimachinery/pkg/api/equality"
)

func ValidateUpdateRequest(oldVal, newVal Request) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.UserAddress, oldVal.UserAddress){
		fields = append(fields, "userAddress")
	}
	if !apiequality.Semantic.DeepEqual(newVal.Nonce, oldVal.Nonce){
		fields = append(fields, "nonce")
	}
	if !apiequality.Semantic.DeepEqual(newVal.ServiceName, oldVal.ServiceName){
		fields = append(fields, "serviceName")
	}
	if !apiequality.Semantic.DeepEqual(newVal.InputFee, oldVal.InputFee){
		fields = append(fields, "inputFee")
	}
	if !apiequality.Semantic.DeepEqual(newVal.OutputFee, oldVal.OutputFee){
		fields = append(fields, "outputFee")
	}
	if !apiequality.Semantic.DeepEqual(newVal.Fee, oldVal.Fee){
		fields = append(fields, "fee")
	}
	if !apiequality.Semantic.DeepEqual(newVal.Signature, oldVal.Signature){
		fields = append(fields, "signature")
	}
	if !apiequality.Semantic.DeepEqual(newVal.TeeSignature, oldVal.TeeSignature){
		fields = append(fields, "teeSignature")
	}
	if !apiequality.Semantic.DeepEqual(newVal.RequestHash, oldVal.RequestHash){
		fields = append(fields, "requestHash")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateService(oldVal, newVal Service) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.Name, oldVal.Name){
		fields = append(fields, "name")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}

func ValidateUpdateUser(oldVal, newVal User) error {
	fields := []string{}
	
	if !apiequality.Semantic.DeepEqual(newVal.User, oldVal.User){
		fields = append(fields, "user")
	}

	if len(fields) > 0 {
		return fmt.Errorf("update field: [%s] not allowed", strings.Join(fields, ","))
	}
	return nil
}
