// Code generated by swaggo/swag. DO NOT EDIT
package doc

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/request": {
            "get": {
                "tags": [
                    "request"
                ],
                "operationId": "listRequest",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Processed",
                        "name": "processed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.RequestList"
                        }
                    }
                }
            }
        },
        "/service": {
            "get": {
                "tags": [
                    "service"
                ],
                "operationId": "listService",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ServiceList"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "service"
                ],
                "operationId": "registerService",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Service"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - success without response body"
                    }
                }
            }
        },
        "/service/{service}": {
            "get": {
                "tags": [
                    "service"
                ],
                "operationId": "getService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Service"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "service"
                ],
                "operationId": "updateService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Service"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            },
            "delete": {
                "tags": [
                    "service"
                ],
                "operationId": "deleteService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/settle": {
            "post": {
                "description": "This endpoint allows you to settle fees for requests from users",
                "tags": [
                    "settle"
                ],
                "operationId": "settleFees",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/sync-account": {
            "post": {
                "description": "This endpoint allows you to synchronize information of all accounts from the contract",
                "tags": [
                    "user"
                ],
                "operationId": "syncUserAccounts",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/sync-service": {
            "post": {
                "description": "This endpoint allows you to synchronize all services from local database to the contract",
                "tags": [
                    "service"
                ],
                "operationId": "syncServices",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/user": {
            "get": {
                "tags": [
                    "user"
                ],
                "operationId": "listUserAccount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserList"
                        }
                    }
                }
            }
        },
        "/user/{user}": {
            "get": {
                "tags": [
                    "user"
                ],
                "operationId": "getUserAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User address",
                        "name": "user",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                }
            }
        },
        "/user/{user}/sync": {
            "post": {
                "description": "This endpoint allows you to synchronize information of single account from the contract",
                "tags": [
                    "user"
                ],
                "operationId": "syncUserAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User address",
                        "name": "user",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ListMeta": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                }
            }
        },
        "model.Request": {
            "type": "object",
            "required": [
                "fee",
                "inputFee",
                "nonce",
                "previousOutputFee",
                "serviceName",
                "signature",
                "userAddress"
            ],
            "properties": {
                "fee": {
                    "type": "integer"
                },
                "inputFee": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "integer"
                },
                "previousOutputFee": {
                    "type": "integer"
                },
                "processed": {
                    "type": "boolean"
                },
                "serviceName": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "userAddress": {
                    "type": "string"
                }
            }
        },
        "model.RequestList": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Request"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/model.ListMeta"
                }
            }
        },
        "model.Service": {
            "type": "object",
            "required": [
                "inputPrice",
                "name",
                "outputPrice",
                "type",
                "url"
            ],
            "properties": {
                "inputPrice": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outputPrice": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string",
                    "readOnly": true
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model.ServiceList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Service"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/model.ListMeta"
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "user"
            ],
            "properties": {
                "lastBalanceCheckTime": {
                    "type": "string"
                },
                "lastRequestNonce": {
                    "type": "integer"
                },
                "lastResponseFee": {
                    "type": "integer"
                },
                "lockBalance": {
                    "type": "integer"
                },
                "signer": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unsettledFee": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "model.UserList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/model.ListMeta"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "0G Serving Provider Agent API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
