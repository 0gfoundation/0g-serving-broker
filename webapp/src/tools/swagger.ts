import { execSync } from "child_process";
import { existsSync, writeFileSync, readdirSync, rmSync } from "fs";
import { stdout } from "process";
import { fileURLToPath } from "url";
import * as path from "path";

// ----------------------------------------- Main -----------------------------------------

const rmExclude: (path: string, pattern: string) => void = (path, pattern) => {
  if (!existsSync(path)) {
    return;
  }

  readdirSync(path).forEach((file) => {
    if (file.indexOf(pattern) < 0) {
      rmSync(`${path}/${file}`, { recursive: true });
    }
  });
};

const writeFile: (filepath: string, content: string) => void = (
  filepath,
  content
) => {
  writeFileSync(
    filepath,
    `/**
  * NOTE: This class is auto generated by the webapp/tools/swagger.ts
  * Do not edit the class manually
  */
  ${content}
  `,
    "utf8"
  );
};

//----------------------------------------- Generate models -----------------------------------------
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const modelPath = `${__dirname}/../apis/models`;
const modelIndex = [`models`];

if (existsSync(`${modelPath}/extra/index.ts`)) {
  modelIndex.push(`extra`);
}
rmExclude(modelPath, "extra");

stdout.write("generate swagger model files");
execSync(`docker run --user $(id -u):$(id -g) --rm \
  -v $(pwd)/../api/user/doc/swagger.yaml:/swagger.yaml --tmpfs /out \
  -v ${modelPath}:/out/model \
  swaggerapi/swagger-codegen-cli generate --reserved-words-mappings for=for \
  -i /swagger.yaml -o /out -l typescript-angular -Dmodels -DsupportingFiles=models.ts
`);

writeFile(
  `${modelPath}/index.ts`,
  `${modelIndex
    .sort()
    .map((item) => `export * from './${item}';`)
    .join("\n")}`
);
