// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/0glabs/0g-serving-agent/common/zkclient/models"
)

// GenerateSolidityCalldataReader is a Reader for the GenerateSolidityCalldata structure.
type GenerateSolidityCalldataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GenerateSolidityCalldataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGenerateSolidityCalldataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGenerateSolidityCalldataDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGenerateSolidityCalldataOK creates a GenerateSolidityCalldataOK with default headers values
func NewGenerateSolidityCalldataOK() *GenerateSolidityCalldataOK {
	return &GenerateSolidityCalldataOK{}
}

/*
GenerateSolidityCalldataOK describes a response with status code 200, with default header values.

OK
*/
type GenerateSolidityCalldataOK struct {
	Payload *GenerateSolidityCalldataOKBody
}

// IsSuccess returns true when this generate solidity calldata o k response has a 2xx status code
func (o *GenerateSolidityCalldataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this generate solidity calldata o k response has a 3xx status code
func (o *GenerateSolidityCalldataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate solidity calldata o k response has a 4xx status code
func (o *GenerateSolidityCalldataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate solidity calldata o k response has a 5xx status code
func (o *GenerateSolidityCalldataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this generate solidity calldata o k response a status code equal to that given
func (o *GenerateSolidityCalldataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the generate solidity calldata o k response
func (o *GenerateSolidityCalldataOK) Code() int {
	return 200
}

func (o *GenerateSolidityCalldataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /solidity-calldata][%d] generateSolidityCalldataOK %s", 200, payload)
}

func (o *GenerateSolidityCalldataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /solidity-calldata][%d] generateSolidityCalldataOK %s", 200, payload)
}

func (o *GenerateSolidityCalldataOK) GetPayload() *GenerateSolidityCalldataOKBody {
	return o.Payload
}

func (o *GenerateSolidityCalldataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GenerateSolidityCalldataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateSolidityCalldataDefault creates a GenerateSolidityCalldataDefault with default headers values
func NewGenerateSolidityCalldataDefault(code int) *GenerateSolidityCalldataDefault {
	return &GenerateSolidityCalldataDefault{
		_statusCode: code,
	}
}

/*
GenerateSolidityCalldataDefault describes a response with status code -1, with default header values.

Error
*/
type GenerateSolidityCalldataDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this generate solidity calldata default response has a 2xx status code
func (o *GenerateSolidityCalldataDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this generate solidity calldata default response has a 3xx status code
func (o *GenerateSolidityCalldataDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this generate solidity calldata default response has a 4xx status code
func (o *GenerateSolidityCalldataDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this generate solidity calldata default response has a 5xx status code
func (o *GenerateSolidityCalldataDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this generate solidity calldata default response a status code equal to that given
func (o *GenerateSolidityCalldataDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the generate solidity calldata default response
func (o *GenerateSolidityCalldataDefault) Code() int {
	return o._statusCode
}

func (o *GenerateSolidityCalldataDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /solidity-calldata][%d] generateSolidityCalldata default %s", o._statusCode, payload)
}

func (o *GenerateSolidityCalldataDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /solidity-calldata][%d] generateSolidityCalldata default %s", o._statusCode, payload)
}

func (o *GenerateSolidityCalldataDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GenerateSolidityCalldataDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GenerateSolidityCalldataBody generate solidity calldata body
swagger:model GenerateSolidityCalldataBody
*/
type GenerateSolidityCalldataBody struct {

	// l
	L int64 `json:"l,omitempty"`

	// pubkey
	Pubkey models.Pubkey `json:"pubkey"`

	// requests
	Requests []*models.Request `json:"requests"`

	// signatures
	Signatures models.Signatures `json:"signatures"`
}

// Validate validates this generate solidity calldata body
func (o *GenerateSolidityCalldataBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenerateSolidityCalldataBody) validatePubkey(formats strfmt.Registry) error {
	if swag.IsZero(o.Pubkey) { // not required
		return nil
	}

	if err := o.Pubkey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "pubkey")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "pubkey")
		}
		return err
	}

	return nil
}

func (o *GenerateSolidityCalldataBody) validateRequests(formats strfmt.Registry) error {
	if swag.IsZero(o.Requests) { // not required
		return nil
	}

	for i := 0; i < len(o.Requests); i++ {
		if swag.IsZero(o.Requests[i]) { // not required
			continue
		}

		if o.Requests[i] != nil {
			if err := o.Requests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GenerateSolidityCalldataBody) validateSignatures(formats strfmt.Registry) error {
	if swag.IsZero(o.Signatures) { // not required
		return nil
	}

	if err := o.Signatures.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signatures")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signatures")
		}
		return err
	}

	return nil
}

// ContextValidate validate this generate solidity calldata body based on the context it is used
func (o *GenerateSolidityCalldataBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubkey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenerateSolidityCalldataBody) contextValidatePubkey(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Pubkey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "pubkey")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "pubkey")
		}
		return err
	}

	return nil
}

func (o *GenerateSolidityCalldataBody) contextValidateRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Requests); i++ {

		if o.Requests[i] != nil {

			if swag.IsZero(o.Requests[i]) { // not required
				return nil
			}

			if err := o.Requests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GenerateSolidityCalldataBody) contextValidateSignatures(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Signatures.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signatures")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signatures")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GenerateSolidityCalldataBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GenerateSolidityCalldataBody) UnmarshalBinary(b []byte) error {
	var res GenerateSolidityCalldataBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GenerateSolidityCalldataOKBody generate solidity calldata o k body
swagger:model GenerateSolidityCalldataOKBody
*/
type GenerateSolidityCalldataOKBody struct {

	// array1
	Array1 []string `json:"array1"`

	// array2
	Array2 [][]string `json:"array2"`

	// array3
	Array3 []string `json:"array3"`

	// array4
	Array4 []string `json:"array4"`
}

// Validate validates this generate solidity calldata o k body
func (o *GenerateSolidityCalldataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateArray1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArray2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArray3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArray4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenerateSolidityCalldataOKBody) validateArray1(formats strfmt.Registry) error {
	if swag.IsZero(o.Array1) { // not required
		return nil
	}

	for i := 0; i < len(o.Array1); i++ {

		if err := validate.Pattern("generateSolidityCalldataOK"+"."+"array1"+"."+strconv.Itoa(i), "body", o.Array1[i], `^0x[0-9a-fA-F]{64}$`); err != nil {
			return err
		}

	}

	return nil
}

func (o *GenerateSolidityCalldataOKBody) validateArray2(formats strfmt.Registry) error {
	if swag.IsZero(o.Array2) { // not required
		return nil
	}

	for i := 0; i < len(o.Array2); i++ {

		for ii := 0; ii < len(o.Array2[i]); ii++ {

			if err := validate.Pattern("generateSolidityCalldataOK"+"."+"array2"+"."+strconv.Itoa(i)+"."+strconv.Itoa(ii), "body", o.Array2[i][ii], `^0x[0-9a-fA-F]{64}$`); err != nil {
				return err
			}

		}

	}

	return nil
}

func (o *GenerateSolidityCalldataOKBody) validateArray3(formats strfmt.Registry) error {
	if swag.IsZero(o.Array3) { // not required
		return nil
	}

	for i := 0; i < len(o.Array3); i++ {

		if err := validate.Pattern("generateSolidityCalldataOK"+"."+"array3"+"."+strconv.Itoa(i), "body", o.Array3[i], `^0x[0-9a-fA-F]{64}$`); err != nil {
			return err
		}

	}

	return nil
}

func (o *GenerateSolidityCalldataOKBody) validateArray4(formats strfmt.Registry) error {
	if swag.IsZero(o.Array4) { // not required
		return nil
	}

	for i := 0; i < len(o.Array4); i++ {

		if err := validate.Pattern("generateSolidityCalldataOK"+"."+"array4"+"."+strconv.Itoa(i), "body", o.Array4[i], `^0x[0-9a-fA-F]{64}$`); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this generate solidity calldata o k body based on context it is used
func (o *GenerateSolidityCalldataOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GenerateSolidityCalldataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GenerateSolidityCalldataOKBody) UnmarshalBinary(b []byte) error {
	var res GenerateSolidityCalldataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
